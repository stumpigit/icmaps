type Timestamp = int;
type FileInfo = 
 record {
   chunkCount: nat;
   createdAt: Timestamp;
   extension: FileExtension;
   layer: text;
   name: text;
   size: nat;
   tilematrixset: text;
   x: nat;
   y: nat;
   z: nat;
 };
type FileId__1 = text;
type FileId = text;
type FileExtension = 
 variant {
   gif;
   jpeg;
   jpg;
   png;
 };
type FileData = 
 record {
   chunkCount: nat;
   cid: principal;
   createdAt: Timestamp;
   extension: FileExtension;
   fileId: FileId__1;
   layer: text;
   name: text;
   size: nat;
   tilematrixset: text;
   uploadedAt: Timestamp;
   x: nat;
   y: nat;
   z: nat;
 };
type Bucket = 
 service {
   authorize: (principal) -> (bool) query;
   generateRandom: (text) -> (text);
   getChunks: (FileId, nat) -> (opt blob) query;
   getFileInfo: (FileId) -> (opt FileData) query;
   getInfo: () -> (vec FileData) query;
   getSize: () -> (nat);
   putChunks: (FileId, nat, blob) -> (opt null);
   putFile: (FileInfo) -> (opt FileId);
   updateFileInfoData: (FileId, FileData) -> () oneway;
   wallet_balance: () -> (nat);
   wallet_receive: () -> (record {accepted: nat64;});
 };
service : () -> Bucket
