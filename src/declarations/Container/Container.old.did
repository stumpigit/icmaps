type Timestamp = int;
type FileInfo = 
 record {
   chunkCount: nat;
   createdAt: Timestamp;
   extension: FileExtension;
   layer: text;
   name: text;
   size: nat;
   tilematrixset: text;
   x: nat;
   y: nat;
   z: nat;
 };
type FileId__1 = text;
type FileId = text;
type FileExtension = 
 variant {
   gif;
   jpeg;
   jpg;
   png;
 };
type FileData = 
 record {
   chunkCount: nat;
   cid: principal;
   createdAt: Timestamp;
   extension: FileExtension;
   fileId: FileId__1;
   layer: text;
   name: text;
   size: nat;
   tilematrixset: text;
   uploadedAt: Timestamp;
   x: nat;
   y: nat;
   z: nat;
 };
type CanisterCycleInfo = 
 record {
   canisterId: text;
   canisterType: variant {
                   bucket;
                   container;
                 };
   cycles: nat;
 };
service : {
  addCanisterIdToBucketsList: (text) -> ();
  getAllFiles: () -> (vec FileData);
  getCanisterCycleInfo: () -> (vec CanisterCycleInfo);
  getFileChunk: (FileId, nat, principal) -> (opt blob);
  getFileInfo: (FileId, principal) -> (opt FileData);
  getStatus: () -> (vec record {
                          principal;
                          nat;
                        }) query;
  putFileChunks: (FileId, nat, nat, blob) -> (opt FileData);
  putFileInfo: (FileInfo) -> (opt FileId);
  updateCycles: () -> ();
  updateStatus: () -> ();
  wallet_balance: () -> (nat);
  wallet_receive: () -> ();
}
