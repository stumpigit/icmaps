// Version: 1.0.0
type Bucket =
  actor {
    generateRandom : shared Text -> async Text;
    getChunks : shared query (FileId__1, Nat) -> async ?Blob;
    getFileInfo : shared query FileId__1 -> async ?FileData__1;
    getInfo : shared query () -> async [FileData__1];
    getSize : shared () -> async Nat;
    putChunks : shared (FileId__1, Nat, Blob) -> async ?();
    putFile : shared FileInfo__1 -> async ?FileId__1;
    updateFileInfoData : shared (FileId__1, FileData__1) -> ();
    wallet_balance : shared () -> async Nat;
    wallet_receive : shared () -> async {accepted : Nat64}
  };
type Bucket__1 = Bucket;
type Bucket__2 = Bucket__1;
type CanisterState<Bucket_1, Nat_1> = {bucket : Bucket_1; var size : Nat_1};
type FileData =
  {
    chunkCount : Nat;
    cid : Principal;
    createdAt : Timestamp;
    extension : FileExtension;
    fileId : FileId;
    layer : Text;
    name : Text;
    size : Nat;
    tilematrixset : Text;
    uploadedAt : Timestamp;
    x : Nat;
    y : Nat;
    z : Nat
  };
type FileData__1 = FileData;
type FileExtension = {#gif; #jpeg; #jpg; #png};
type FileId = Text;
type FileId__1 = FileId;
type FileInfo =
  {
    chunkCount : Nat;
    createdAt : Timestamp;
    extension : FileExtension;
    layer : Text;
    name : Text;
    size : Nat;
    tilematrixset : Text;
    x : Nat;
    y : Nat;
    z : Nat
  };
type FileInfo__1 = FileInfo;
type Timestamp = Int;
actor {
  stable var canisters : [var (?CanisterState<Bucket__2, Nat>)];
  stable var currentBucketId : Nat
};
